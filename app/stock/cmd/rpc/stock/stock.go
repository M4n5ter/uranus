// Code generated by goctl. DO NOT EDIT!
// Source: stock.proto

package stock

import (
	"context"

	"uranus/app/stock/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddStockBySpaceIDReq      = pb.AddStockBySpaceIDReq
	AddStockByTicketIDReq     = pb.AddStockByTicketIDReq
	AddStockResp              = pb.AddStockResp
	DeductStockBySpaceIDReq   = pb.DeductStockBySpaceIDReq
	DeductStockByTicketIDReq  = pb.DeductStockByTicketIDReq
	DeductStockResp           = pb.DeductStockResp
	ReleaseStockBySpaceIDReq  = pb.ReleaseStockBySpaceIDReq
	ReleaseStockByTicketIDReq = pb.ReleaseStockByTicketIDReq
	ReleaseStockResp          = pb.ReleaseStockResp

	Stock interface {
		// 通过 ticketID 加库存
		AddStockByTicketID(ctx context.Context, in *AddStockByTicketIDReq, opts ...grpc.CallOption) (*AddStockResp, error)
		// 通过 ticketID 加库存 rollback
		AddStockByTicketIDRollBack(ctx context.Context, in *AddStockByTicketIDReq, opts ...grpc.CallOption) (*AddStockResp, error)
		// 通过 spaceID 加库存
		AddStockBySpaceID(ctx context.Context, in *AddStockBySpaceIDReq, opts ...grpc.CallOption) (*AddStockResp, error)
		// 通过 spaceID 加库存 rollback
		AddStockBySpaceIDRollBack(ctx context.Context, in *AddStockBySpaceIDReq, opts ...grpc.CallOption) (*AddStockResp, error)
		// 通过 ticketID 扣库存
		DeductStockByTicketID(ctx context.Context, in *DeductStockByTicketIDReq, opts ...grpc.CallOption) (*DeductStockResp, error)
		// 通过 ticketID 扣库存 rollback
		DeductStockByTicketIDRollBack(ctx context.Context, in *DeductStockByTicketIDReq, opts ...grpc.CallOption) (*DeductStockResp, error)
		// 通过 spaceID 扣库存
		DeductStockBySpaceID(ctx context.Context, in *DeductStockBySpaceIDReq, opts ...grpc.CallOption) (*DeductStockResp, error)
		// 通过 spaceID 扣库存 rollback
		DeductStockBySpaceIDRollBack(ctx context.Context, in *DeductStockBySpaceIDReq, opts ...grpc.CallOption) (*DeductStockResp, error)
		// 通过 ticketID 释放锁定的库存
		ReleaseStockByTicketID(ctx context.Context, in *ReleaseStockByTicketIDReq, opts ...grpc.CallOption) (*ReleaseStockResp, error)
		// 通过 ticketID 释放锁定的库存 rollback
		ReleaseStockByTicketIDRollBack(ctx context.Context, in *ReleaseStockByTicketIDReq, opts ...grpc.CallOption) (*ReleaseStockResp, error)
		// 通过 spaceID 释放锁定的库存
		ReleaseStockBySpaceID(ctx context.Context, in *ReleaseStockBySpaceIDReq, opts ...grpc.CallOption) (*ReleaseStockResp, error)
		// 通过 spaceID 释放锁定的库存 rollback
		ReleaseStockBySpaceIDRollBack(ctx context.Context, in *ReleaseStockBySpaceIDReq, opts ...grpc.CallOption) (*ReleaseStockResp, error)
	}

	defaultStock struct {
		cli zrpc.Client
	}
)

func NewStock(cli zrpc.Client) Stock {
	return &defaultStock{
		cli: cli,
	}
}

// 通过 ticketID 加库存
func (m *defaultStock) AddStockByTicketID(ctx context.Context, in *AddStockByTicketIDReq, opts ...grpc.CallOption) (*AddStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.AddStockByTicketID(ctx, in, opts...)
}

// 通过 ticketID 加库存 rollback
func (m *defaultStock) AddStockByTicketIDRollBack(ctx context.Context, in *AddStockByTicketIDReq, opts ...grpc.CallOption) (*AddStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.AddStockByTicketIDRollBack(ctx, in, opts...)
}

// 通过 spaceID 加库存
func (m *defaultStock) AddStockBySpaceID(ctx context.Context, in *AddStockBySpaceIDReq, opts ...grpc.CallOption) (*AddStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.AddStockBySpaceID(ctx, in, opts...)
}

// 通过 spaceID 加库存 rollback
func (m *defaultStock) AddStockBySpaceIDRollBack(ctx context.Context, in *AddStockBySpaceIDReq, opts ...grpc.CallOption) (*AddStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.AddStockBySpaceIDRollBack(ctx, in, opts...)
}

// 通过 ticketID 扣库存
func (m *defaultStock) DeductStockByTicketID(ctx context.Context, in *DeductStockByTicketIDReq, opts ...grpc.CallOption) (*DeductStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.DeductStockByTicketID(ctx, in, opts...)
}

// 通过 ticketID 扣库存 rollback
func (m *defaultStock) DeductStockByTicketIDRollBack(ctx context.Context, in *DeductStockByTicketIDReq, opts ...grpc.CallOption) (*DeductStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.DeductStockByTicketIDRollBack(ctx, in, opts...)
}

// 通过 spaceID 扣库存
func (m *defaultStock) DeductStockBySpaceID(ctx context.Context, in *DeductStockBySpaceIDReq, opts ...grpc.CallOption) (*DeductStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.DeductStockBySpaceID(ctx, in, opts...)
}

// 通过 spaceID 扣库存 rollback
func (m *defaultStock) DeductStockBySpaceIDRollBack(ctx context.Context, in *DeductStockBySpaceIDReq, opts ...grpc.CallOption) (*DeductStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.DeductStockBySpaceIDRollBack(ctx, in, opts...)
}

// 通过 ticketID 释放锁定的库存
func (m *defaultStock) ReleaseStockByTicketID(ctx context.Context, in *ReleaseStockByTicketIDReq, opts ...grpc.CallOption) (*ReleaseStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.ReleaseStockByTicketID(ctx, in, opts...)
}

// 通过 ticketID 释放锁定的库存 rollback
func (m *defaultStock) ReleaseStockByTicketIDRollBack(ctx context.Context, in *ReleaseStockByTicketIDReq, opts ...grpc.CallOption) (*ReleaseStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.ReleaseStockByTicketIDRollBack(ctx, in, opts...)
}

// 通过 spaceID 释放锁定的库存
func (m *defaultStock) ReleaseStockBySpaceID(ctx context.Context, in *ReleaseStockBySpaceIDReq, opts ...grpc.CallOption) (*ReleaseStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.ReleaseStockBySpaceID(ctx, in, opts...)
}

// 通过 spaceID 释放锁定的库存 rollback
func (m *defaultStock) ReleaseStockBySpaceIDRollBack(ctx context.Context, in *ReleaseStockBySpaceIDReq, opts ...grpc.CallOption) (*ReleaseStockResp, error) {
	client := pb.NewStockClient(m.cli.Conn())
	return client.ReleaseStockBySpaceIDRollBack(ctx, in, opts...)
}
