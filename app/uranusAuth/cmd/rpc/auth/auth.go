// Code generated by goctl. DO NOT EDIT!
// Source: uranusAuth.proto

package auth

import (
	"context"

	"uranus/app/uranusAuth/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClearTokenReq     = pb.ClearTokenReq
	ClearTokenResp    = pb.ClearTokenResp
	GenerateTokenReq  = pb.GenerateTokenReq
	GenerateTokenResp = pb.GenerateTokenResp
	ValidateTokenReq  = pb.ValidateTokenReq
	ValidateTokenResp = pb.ValidateTokenResp

	Auth interface {
		//  生成 Token 服务只对 usercenter 开放
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		//  清除 Token 服务只对 usercenter 开放
		ClearToken(ctx context.Context, in *ClearTokenReq, opts ...grpc.CallOption) (*ClearTokenResp, error)
		//  ValidateToken 只对 usercenter 和授权服务 api 开放
		ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error)
	}

	defaultAuth struct {
		cli zrpc.Client
	}
)

func NewAuth(cli zrpc.Client) Auth {
	return &defaultAuth{
		cli: cli,
	}
}

//  生成 Token 服务只对 usercenter 开放
func (m *defaultAuth) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewAuthClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

//  清除 Token 服务只对 usercenter 开放
func (m *defaultAuth) ClearToken(ctx context.Context, in *ClearTokenReq, opts ...grpc.CallOption) (*ClearTokenResp, error) {
	client := pb.NewAuthClient(m.cli.Conn())
	return client.ClearToken(ctx, in, opts...)
}

//  ValidateToken 只对 usercenter 和授权服务 api 开放
func (m *defaultAuth) ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error) {
	client := pb.NewAuthClient(m.cli.Conn())
	return client.ValidateToken(ctx, in, opts...)
}
