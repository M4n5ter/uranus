// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: app/flightInquiry/cmd/rpc/pb/flightInquiry.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlightInquiryClient is the client API for FlightInquiry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightInquiryClient interface {
	// 通过给定日期、航班号进行航班查询请求
	QuireBySetOutTimeAndFlightNumber(ctx context.Context, in *QuireBySetOutTimeAndFlightNumberReq, opts ...grpc.CallOption) (*QuireBySetOutTimeAndFlightNumberResp, error)
	// 通过给定日期、出发地、目的地进行航班查询请求
	QuireBySetOutTimeStartPositionEndPosition(ctx context.Context, in *QuireBySetOutTimeStartPositionEndPositionReq, opts ...grpc.CallOption) (*QuireBySetOutTimeStartPositionEndPositionResp, error)
}

type flightInquiryClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightInquiryClient(cc grpc.ClientConnInterface) FlightInquiryClient {
	return &flightInquiryClient{cc}
}

func (c *flightInquiryClient) QuireBySetOutTimeAndFlightNumber(ctx context.Context, in *QuireBySetOutTimeAndFlightNumberReq, opts ...grpc.CallOption) (*QuireBySetOutTimeAndFlightNumberResp, error) {
	out := new(QuireBySetOutTimeAndFlightNumberResp)
	err := c.cc.Invoke(ctx, "/pb.flightInquiry/QuireBySetOutTimeAndFlightNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightInquiryClient) QuireBySetOutTimeStartPositionEndPosition(ctx context.Context, in *QuireBySetOutTimeStartPositionEndPositionReq, opts ...grpc.CallOption) (*QuireBySetOutTimeStartPositionEndPositionResp, error) {
	out := new(QuireBySetOutTimeStartPositionEndPositionResp)
	err := c.cc.Invoke(ctx, "/pb.flightInquiry/QuireBySetOutTimeStartPositionEndPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightInquiryServer is the server API for FlightInquiry service.
// All implementations must embed UnimplementedFlightInquiryServer
// for forward compatibility
type FlightInquiryServer interface {
	// 通过给定日期、航班号进行航班查询请求
	QuireBySetOutTimeAndFlightNumber(context.Context, *QuireBySetOutTimeAndFlightNumberReq) (*QuireBySetOutTimeAndFlightNumberResp, error)
	// 通过给定日期、出发地、目的地进行航班查询请求
	QuireBySetOutTimeStartPositionEndPosition(context.Context, *QuireBySetOutTimeStartPositionEndPositionReq) (*QuireBySetOutTimeStartPositionEndPositionResp, error)
	mustEmbedUnimplementedFlightInquiryServer()
}

// UnimplementedFlightInquiryServer must be embedded to have forward compatible implementations.
type UnimplementedFlightInquiryServer struct {
}

func (UnimplementedFlightInquiryServer) QuireBySetOutTimeAndFlightNumber(context.Context, *QuireBySetOutTimeAndFlightNumberReq) (*QuireBySetOutTimeAndFlightNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuireBySetOutTimeAndFlightNumber not implemented")
}
func (UnimplementedFlightInquiryServer) QuireBySetOutTimeStartPositionEndPosition(context.Context, *QuireBySetOutTimeStartPositionEndPositionReq) (*QuireBySetOutTimeStartPositionEndPositionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuireBySetOutTimeStartPositionEndPosition not implemented")
}
func (UnimplementedFlightInquiryServer) mustEmbedUnimplementedFlightInquiryServer() {}

// UnsafeFlightInquiryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightInquiryServer will
// result in compilation errors.
type UnsafeFlightInquiryServer interface {
	mustEmbedUnimplementedFlightInquiryServer()
}

func RegisterFlightInquiryServer(s grpc.ServiceRegistrar, srv FlightInquiryServer) {
	s.RegisterService(&FlightInquiry_ServiceDesc, srv)
}

func _FlightInquiry_QuireBySetOutTimeAndFlightNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuireBySetOutTimeAndFlightNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightInquiryServer).QuireBySetOutTimeAndFlightNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.flightInquiry/QuireBySetOutTimeAndFlightNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightInquiryServer).QuireBySetOutTimeAndFlightNumber(ctx, req.(*QuireBySetOutTimeAndFlightNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightInquiry_QuireBySetOutTimeStartPositionEndPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuireBySetOutTimeStartPositionEndPositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightInquiryServer).QuireBySetOutTimeStartPositionEndPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.flightInquiry/QuireBySetOutTimeStartPositionEndPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightInquiryServer).QuireBySetOutTimeStartPositionEndPosition(ctx, req.(*QuireBySetOutTimeStartPositionEndPositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightInquiry_ServiceDesc is the grpc.ServiceDesc for FlightInquiry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightInquiry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.flightInquiry",
	HandlerType: (*FlightInquiryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuireBySetOutTimeAndFlightNumber",
			Handler:    _FlightInquiry_QuireBySetOutTimeAndFlightNumber_Handler,
		},
		{
			MethodName: "QuireBySetOutTimeStartPositionEndPosition",
			Handler:    _FlightInquiry_QuireBySetOutTimeStartPositionEndPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/flightInquiry/cmd/rpc/pb/flightInquiry.proto",
}
