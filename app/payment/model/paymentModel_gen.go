// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"uranus/common/globalkey"
	"uranus/common/xerr"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentFieldNames          = builder.RawFieldNames(&Payment{})
	paymentRows                = strings.Join(paymentFieldNames, ",")
	paymentRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	paymentRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cachePaymentIdPrefix      = "cache:payment:id:"
	cachePaymentOrderSnPrefix = "cache:payment:orderSn:"
	cachePaymentSnPrefix      = "cache:payment:sn:"
)

type (
	paymentModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Payment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Payment, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*Payment, error)
		FindOneBySn(ctx context.Context, sn string) (*Payment, error)
		Update(ctx context.Context, session sqlx.Session, data *Payment) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Payment) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultPaymentModel struct {
		sqlc.CachedConn
		table string
	}

	Payment struct {
		Id             int64     `db:"id"`
		Sn             string    `db:"sn"` // 流水单号
		CreateTime     time.Time `db:"create_time"`
		UpdateTime     time.Time `db:"update_time"`
		DeleteTime     time.Time `db:"delete_time"`
		DelState       int64     `db:"del_state"`
		Version        int64     `db:"version"`          // 乐观锁版本号
		UserId         int64     `db:"user_id"`          // 用户id
		PayMode        string    `db:"pay_mode"`         // 支付方式 1:微信支付 2:支付宝 3:钱包余额
		TradeType      string    `db:"trade_type"`       // 第三方支付类型
		TradeState     string    `db:"trade_state"`      // 第三方交易状态
		PayTotal       int64     `db:"pay_total"`        // 支付总金额(分)
		TransactionId  string    `db:"transaction_id"`   // 第三方支付单号
		TradeStateDesc string    `db:"trade_state_desc"` // 支付状态描述
		OrderSn        string    `db:"order_sn"`         // 业务单号
		PayStatus      int64     `db:"pay_status"`       // 平台内交易状态   -1:支付失败 0:未支付 1:支付成功 2:已退款
		PayTime        time.Time `db:"pay_time"`         // 支付成功时间
	}
)

func newPaymentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPaymentModel {
	return &defaultPaymentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`payment`",
	}
}

func (m *defaultPaymentModel) Insert(ctx context.Context, session sqlx.Session, data *Payment) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	paymentIdKey := fmt.Sprintf("%s%v", cachePaymentIdPrefix, data.Id)
	paymentOrderSnKey := fmt.Sprintf("%s%v", cachePaymentOrderSnPrefix, data.OrderSn)
	paymentSnKey := fmt.Sprintf("%s%v", cachePaymentSnPrefix, data.Sn)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, paymentRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Sn, data.DeleteTime, data.DelState, data.Version, data.UserId, data.PayMode, data.TradeType, data.TradeState, data.PayTotal, data.TransactionId, data.TradeStateDesc, data.OrderSn, data.PayStatus, data.PayTime)
		}
		return conn.ExecCtx(ctx, query, data.Sn, data.DeleteTime, data.DelState, data.Version, data.UserId, data.PayMode, data.TradeType, data.TradeState, data.PayTotal, data.TransactionId, data.TradeStateDesc, data.OrderSn, data.PayStatus, data.PayTime)
	}, paymentIdKey, paymentOrderSnKey, paymentSnKey)
}

func (m *defaultPaymentModel) FindOne(ctx context.Context, id int64) (*Payment, error) {
	paymentIdKey := fmt.Sprintf("%s%v", cachePaymentIdPrefix, id)
	var resp Payment
	err := m.QueryRowCtx(ctx, &resp, paymentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", paymentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*Payment, error) {
	paymentOrderSnKey := fmt.Sprintf("%s%v", cachePaymentOrderSnPrefix, orderSn)
	var resp Payment
	err := m.QueryRowIndexCtx(ctx, &resp, paymentOrderSnKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `order_sn` = ? and del_state = ? limit 1", paymentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderSn, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentModel) FindOneBySn(ctx context.Context, sn string) (*Payment, error) {
	paymentSnKey := fmt.Sprintf("%s%v", cachePaymentSnPrefix, sn)
	var resp Payment
	err := m.QueryRowIndexCtx(ctx, &resp, paymentSnKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `sn` = ? and del_state = ? limit 1", paymentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, sn, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentModel) Update(ctx context.Context, session sqlx.Session, data *Payment) (sql.Result, error) {
	paymentOrderSnKey := fmt.Sprintf("%s%v", cachePaymentOrderSnPrefix, data.OrderSn)
	paymentSnKey := fmt.Sprintf("%s%v", cachePaymentSnPrefix, data.Sn)
	paymentIdKey := fmt.Sprintf("%s%v", cachePaymentIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Sn, data.DeleteTime, data.DelState, data.Version, data.UserId, data.PayMode, data.TradeType, data.TradeState, data.PayTotal, data.TransactionId, data.TradeStateDesc, data.OrderSn, data.PayStatus, data.PayTime, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.Sn, data.DeleteTime, data.DelState, data.Version, data.UserId, data.PayMode, data.TradeType, data.TradeState, data.PayTotal, data.TransactionId, data.TradeStateDesc, data.OrderSn, data.PayStatus, data.PayTime, data.Id)
	}, paymentSnKey, paymentIdKey, paymentOrderSnKey)
}

func (m *defaultPaymentModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Payment) error {

	oldVersion := data.Version
	data.Version += 1

	var sqlResult sql.Result
	var err error

	paymentOrderSnKey := fmt.Sprintf("%s%v", cachePaymentOrderSnPrefix, data.OrderSn)
	paymentSnKey := fmt.Sprintf("%s%v", cachePaymentSnPrefix, data.Sn)
	paymentIdKey := fmt.Sprintf("%s%v", cachePaymentIdPrefix, data.Id)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, paymentRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Sn, data.DeleteTime, data.DelState, data.Version, data.UserId, data.PayMode, data.TradeType, data.TradeState, data.PayTotal, data.TransactionId, data.TradeStateDesc, data.OrderSn, data.PayStatus, data.PayTime, data.Id, oldVersion)
		}
		return conn.ExecCtx(ctx, query, data.Sn, data.DeleteTime, data.DelState, data.Version, data.UserId, data.PayMode, data.TradeType, data.TradeState, data.PayTotal, data.TransactionId, data.TradeStateDesc, data.OrderSn, data.PayStatus, data.PayTime, data.Id, oldVersion)
	}, paymentSnKey, paymentIdKey, paymentOrderSnKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return xerr.NewErrCode(xerr.DB_UPDATE_AFFECTED_ZERO_ERROR)
	}

	return nil
}

func (m *defaultPaymentModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	paymentIdKey := fmt.Sprintf("%s%v", cachePaymentIdPrefix, id)
	paymentOrderSnKey := fmt.Sprintf("%s%v", cachePaymentOrderSnPrefix, data.OrderSn)
	paymentSnKey := fmt.Sprintf("%s%v", cachePaymentSnPrefix, data.Sn)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, paymentIdKey, paymentOrderSnKey, paymentSnKey)
	return err
}

func (m *defaultPaymentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePaymentIdPrefix, primary)
}
func (m *defaultPaymentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", paymentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultPaymentModel) tableName() string {
	return m.table
}
